import discord
from discord import app_commands
from discord.ext import commands

from functions.API_functions.API_Request_Character import get_character_ocid, request_character_itemequipment
import datetime


class EquipmentView(discord.ui.View):
    def __init__(self, character_name: str, character_equipment_data: dict, current_preset: str = "preset_1"):
        super().__init__(timeout=300)  # 5ÂàÜÈêòË∂ÖÊôÇ
        self.character_name = character_name
        self.character_equipment_data = character_equipment_data
        self.current_preset = current_preset
        self.current_category = "weapon"  # È†êË®≠ÂàÜÈ°û
        
        # ËôïÁêÜÁï∂Ââç preset ÁöÑË£ùÂÇôÊï∏Êìö
        self._process_equipment_data()
        # Êõ¥Êñ∞ÊåâÈàïÈ°èËâ≤
        self._update_preset_button_styles()
    
    def _update_preset_button_styles(self):
        """Ê†πÊìöÁï∂Ââç preset Êõ¥Êñ∞ÊåâÈàïÈ°èËâ≤"""
        for item in self.children:
            if isinstance(item, discord.ui.Button):
                if item.label == "È†êË®≠1":
                    item.style = discord.ButtonStyle.primary if self.current_preset == "preset_1" else discord.ButtonStyle.success
                elif item.label == "È†êË®≠2":
                    item.style = discord.ButtonStyle.primary if self.current_preset == "preset_2" else discord.ButtonStyle.success
                elif item.label == "È†êË®≠3":
                    item.style = discord.ButtonStyle.primary if self.current_preset == "preset_3" else discord.ButtonStyle.success
    
    def _process_equipment_data(self):
        """ËôïÁêÜË£ùÂÇôÊï∏Êìö‰∏¶ÂàÜÈ°û"""
        preset_key = f'item_equipment_{self.current_preset}'
        preset_equipment = self.character_equipment_data.get(preset_key, [])
        
        # Ë£ùÂÇôÈÉ®‰ΩçÂàÜÈ°û
        weapon_slots = ['Ê≠¶Âô®', 'ËºîÂä©Ê≠¶Âô®', 'ÂæΩÁ´†']
        armor_slots = ['Â∏ΩÂ≠ê', '‰∏äË°£', 'Ë§≤/Ë£ô', 'ÈûãÂ≠ê', 'ÊâãÂ•ó', 'Êä´È¢®', 'ËÇ©ËÜÄË£ùÈ£æ']
        accessory_slots = ['ËáâÈ£æ', 'ÁúºÈ£æ', 'ËÄ≥Áí∞', 'Â¢úÈ£æ', 'Â¢úÈ£æ2', 'ËÖ∞Â∏∂', 'ÊàíÊåá1', 'ÊàíÊåá2', 'ÊàíÊåá3', 'ÊàíÊåá4']
        other_slots = ['Âè£Ë¢ãÈÅìÂÖ∑', 'ËÉ∏Á´†', 'Âã≥Á´†', 'Ê©üÂô®‰∫∫', 'Ê©üÂô®ÂøÉËáü']
        
        # ÈáçÁΩÆÂàÜÁµÑ
        self.weapon_info = []
        self.armor_info = []
        self.accessory_info = []
        self.other_info = []
        
        for equipment in preset_equipment:
            item_name = equipment.get('item_name', 'Êú™Áü•Ë£ùÂÇô')
            item_slot = equipment.get('item_equipment_slot', 'Êú™Áü•ÈÉ®‰Ωç')
            starforce = equipment.get('starforce', '0')
            
            # ÊΩõËÉΩÈÅ∏È†Ö
            potential_grade = equipment.get('potential_option_grade', 'None')
            potential_1 = equipment.get('potential_option_1')
            potential_2 = equipment.get('potential_option_2')
            potential_3 = equipment.get('potential_option_3')
            
            # ÈôÑÂä†ÊΩõËÉΩÈÅ∏È†Ö
            add_potential_grade = equipment.get('additional_potential_option_grade', 'None')
            add_potential_1 = equipment.get('additional_potential_option_1')
            add_potential_2 = equipment.get('additional_potential_option_2')
            add_potential_3 = equipment.get('additional_potential_option_3')
            
            # Ê†ºÂºèÂåñË£ùÂÇôË≥áË®ä - Ë©≥Á¥∞È°ØÁ§∫
            equipment_text = f"**{item_name}**"
            if int(starforce) > 0:
                equipment_text += f" ‚≠ê{starforce}"
                
                # Ê∑ªÂä†Âç∑Ëª∏ÂçáÁ¥öË≥áË®ä
                scroll_upgrade = equipment.get('scroll_upgrade', '0')
                if int(scroll_upgrade) > 0:
                    item_etc_option = equipment.get('item_etc_option', {})
                    attack_power = int(item_etc_option.get('attack_power', 0))
                    magic_power = int(item_etc_option.get('magic_power', 0))
                    max_power = max(attack_power, magic_power)
                    
                    if max_power > 0:
                        scroll_avg = max_power / int(scroll_upgrade)
                        equipment_text += f" üìú{scroll_avg:.1f}"
                        
            equipment_text += "\n"
            
            # Ê™¢Êü•ÊòØÂê¶ÁÇ∫ÊàíÊåá‰∏¶‰∏îÊúâ special_ring_level
            special_ring_level = equipment.get('special_ring_level')
            if item_slot in ['ÊàíÊåá1', 'ÊàíÊåá2', 'ÊàíÊåá3', 'ÊàíÊåá4'] and special_ring_level:
                try:
                    ring_level = int(special_ring_level)
                    if ring_level > 0:
                        equipment_text += f"```LV {ring_level}\n```"
                except (ValueError, TypeError):
                    pass
            
            # ÊΩõËÉΩË≥áË®äÔºàË©≥Á¥∞È°ØÁ§∫Ôºâ
            if potential_grade != 'None' and potential_1:
                potentials = [p for p in [potential_1, potential_2, potential_3] if p]
                if potentials:
                    # Ê†πÊìöÊΩõËÉΩÁ≠âÁ¥öÊ∑ªÂä†È°èËâ≤ÂúñÊ®ô
                    grade_icon = ""
                    if potential_grade == "ÂÇ≥Ë™™":
                        grade_icon = "üü¢"  # Á∂†Ëâ≤
                    elif potential_grade == "ÁΩïË¶ã":
                        grade_icon = "üü°"  # ÈªÉËâ≤
                    elif potential_grade == "Á®ÄÊúâ":
                        grade_icon = "üü£"  # Á¥´Ëâ≤
                    elif potential_grade == "ÁâπÊÆä":
                        grade_icon = "üîµ"  # ËóçËâ≤
                    
                    equipment_text += f"```{grade_icon}{' / '.join(potentials)}\n```"
            
            # ÈôÑÂä†ÊΩõËÉΩË≥áË®äÔºàË©≥Á¥∞È°ØÁ§∫Ôºâ
            if add_potential_grade != 'None' and add_potential_1:
                add_potentials = [p for p in [add_potential_1, add_potential_2, add_potential_3] if p]
                if add_potentials:
                    # Ê†πÊìöÈôÑÂä†ÊΩõËÉΩÁ≠âÁ¥öÊ∑ªÂä†È°èËâ≤ÂúñÊ®ô
                    add_grade_icon = ""
                    if add_potential_grade == "ÂÇ≥Ë™™":
                        add_grade_icon = "üü¢"  # Á∂†Ëâ≤
                    elif add_potential_grade == "ÁΩïË¶ã":
                        add_grade_icon = "üü°"  # ÈªÉËâ≤
                    elif add_potential_grade == "Á®ÄÊúâ":
                        add_grade_icon = "üü£"  # Á¥´Ëâ≤
                    elif add_potential_grade == "ÁâπÊÆä":
                        add_grade_icon = "üîµ"  # ËóçËâ≤
                    
                    equipment_text += f"```{add_grade_icon}{' / '.join(add_potentials)}\n```"
            
            equipment_text += "\n"  # Ê∑ªÂä†ÂàÜÈöîÁ©∫Ë°å
            
            # ÂàÜÈ°ûË£ùÂÇôÔºà‰ΩøÁî® item_equipment_slotÔºâ
            if item_slot in weapon_slots:
                self.weapon_info.append(equipment_text)
            elif item_slot in armor_slots:
                self.armor_info.append(equipment_text)
            elif item_slot in accessory_slots:
                self.accessory_info.append(equipment_text)
            elif item_slot in other_slots:
                self.other_info.append(equipment_text)
        
    def create_embed(self, category: str) -> discord.Embed:
        """Ê†πÊìöÂàÜÈ°ûÂâµÂª∫Â∞çÊáâÁöÑ embed"""
        category_names = {
            "weapon": "Ê≠¶Âô®",
            "armor": "Èò≤ÂÖ∑", 
            "accessory": "È£æÂìÅ",
            "other": "ÂÖ∂‰ªñ"
        }
        
        preset_names = {
            "preset_1": "Ë£ùÂÇôÈ†êË®≠ 1",
            "preset_2": "Ë£ùÂÇôÈ†êË®≠ 2", 
            "preset_3": "Ë£ùÂÇôÈ†êË®≠ 3"
        }
        
        embed = discord.Embed(
            title=f"{self.character_name} ÁöÑË£ùÂÇôË≥áË®ä",
            description=f"**{preset_names.get(self.current_preset, 'Êú™Áü•ÈÖçÁΩÆ')} - {category_names.get(category, 'Êú™Áü•ÂàÜÈ°û')}**",
            color=discord.Color.green(),
            timestamp=datetime.datetime.now()
        )
        
        if category == "weapon":
            # ÂÉÖÊ≠¶Âô®
            if self.weapon_info:
                text = ''.join(self.weapon_info)
                if len(text) > 1024:
                    # ÂàÜÂâ≤Èï∑ÊñáÊú¨
                    chunks = []
                    current_chunk = ""
                    for item in self.weapon_info:
                        if len(current_chunk + item) > 1000: 
                            chunks.append(current_chunk)
                            current_chunk = item
                        else:
                            current_chunk += item
                    if current_chunk:
                        chunks.append(current_chunk)
                    
                    for i, chunk in enumerate(chunks):
                        embed.add_field(name="\u200b", value=chunk, inline=False)
                else:
                    embed.add_field(name="\u200b", value=text, inline=False)
            else:
                embed.add_field(name="\u200b", value="ÁÑ°Ë£ùÂÇôË≥áÊñô", inline=False)
                
        elif category == "armor":
            if self.armor_info:
                text = ''.join(self.armor_info)
                if len(text) > 1024:
                    chunks = []
                    current_chunk = ""
                    for item in self.armor_info:
                        if len(current_chunk + item) > 1000:
                            chunks.append(current_chunk)
                            current_chunk = item
                        else:
                            current_chunk += item
                    if current_chunk:
                        chunks.append(current_chunk)
                    
                    for i, chunk in enumerate(chunks):
                        embed.add_field(name="\u200b", value=chunk, inline=False)
                else:
                    embed.add_field(name="\u200b", value=text, inline=False)
            else:
                embed.add_field(name="\u200b", value="ÁÑ°Ë£ùÂÇôË≥áÊñô", inline=False)
                
        elif category == "accessory":
            if self.accessory_info:
                text = ''.join(self.accessory_info)
                if len(text) > 1024:
                    chunks = []
                    current_chunk = ""
                    for item in self.accessory_info:
                        if len(current_chunk + item) > 1000:
                            chunks.append(current_chunk)
                            current_chunk = item
                        else:
                            current_chunk += item
                    if current_chunk:
                        chunks.append(current_chunk)
                    
                    for i, chunk in enumerate(chunks):
                        embed.add_field(name="\u200b", value=chunk, inline=False)
                else:
                    embed.add_field(name="\u200b", value=text, inline=False)
            else:
                embed.add_field(name="\u200b", value="ÁÑ°Ë£ùÂÇôË≥áÊñô", inline=False)
                
        elif category == "other":
            if self.other_info:
                text = ''.join(self.other_info)
                if len(text) > 1024:
                    chunks = []
                    current_chunk = ""
                    for item in self.other_info:
                        if len(current_chunk + item) > 1000:
                            chunks.append(current_chunk)
                            current_chunk = item
                        else:
                            current_chunk += item
                    if current_chunk:
                        chunks.append(current_chunk)
                    
                    for i, chunk in enumerate(chunks):
                        embed.add_field(name="\u200b", value=chunk, inline=False)
                else:
                    embed.add_field(name="\u200b", value=text, inline=False)
            else:
                embed.add_field(name="\u200b", value="ÁÑ°Ë£ùÂÇôË≥áÊñô", inline=False)
        
        return embed
    
    @discord.ui.select(
        placeholder="ÈÅ∏ÊìáË¶ÅÊü•ÁúãÁöÑË£ùÂÇôÂàÜÈ°û...",
        min_values=1,
        max_values=1,
        options=[
            discord.SelectOption(
                label="Ê≠¶Âô®",
                description="‰∏ªÊ≠¶Âô®„ÄÅÂâØÊâãÊ≠¶Âô®",
                emoji="‚öîÔ∏è",
                value="weapon"
            ),
            discord.SelectOption(
                label="Èò≤ÂÖ∑",
                description="Â∏ΩÂ≠ê„ÄÅ‰∏äË°£„ÄÅ‰∏ãË£ùÁ≠â",
                emoji="üõ°Ô∏è",
                value="armor"
            ),
            discord.SelectOption(
                label="È£æÂìÅ",
                description="ÊàíÊåá„ÄÅÈ†ÖÈçä„ÄÅËÄ≥Áí∞Á≠â",
                emoji="üíé",
                value="accessory"
            ),
            discord.SelectOption(
                label="ÂÖ∂‰ªñ",
                description="ÂæΩÁ´†„ÄÅÊ©üÊ¢∞ÂøÉËáü„ÄÅËÇ©Á´†Á≠â",
                emoji="üéñÔ∏è",
                value="other"
            )
        ]
    )
    async def select_category(self, interaction: discord.Interaction, select: discord.ui.Select):
        self.current_category = select.values[0]
        embed = self.create_embed(self.current_category)
        await interaction.response.edit_message(embed=embed, view=self)
    
    @discord.ui.button(label="È†êË®≠1", style=discord.ButtonStyle.success)
    async def preset_1_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.current_preset != "preset_1":
            self.current_preset = "preset_1"
            self._process_equipment_data()
            self._update_preset_button_styles()
            embed = self.create_embed(self.current_category)
            await interaction.response.edit_message(embed=embed, view=self)
        else:
            await interaction.response.defer()

    @discord.ui.button(label="È†êË®≠2", style=discord.ButtonStyle.success)
    async def preset_2_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.current_preset != "preset_2":
            self.current_preset = "preset_2"
            self._process_equipment_data()
            self._update_preset_button_styles()
            embed = self.create_embed(self.current_category)
            await interaction.response.edit_message(embed=embed, view=self)
        else:
            await interaction.response.defer()
    
    @discord.ui.button(label="È†êË®≠3", style=discord.ButtonStyle.success)
    async def preset_3_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.current_preset != "preset_3":
            self.current_preset = "preset_3"
            self._process_equipment_data()
            self._update_preset_button_styles()
            embed = self.create_embed(self.current_category)
            await interaction.response.edit_message(embed=embed, view=self)
        else:
            await interaction.response.defer()
    
    @discord.ui.button(label="ËøîÂõûËßíËâ≤Ë≥áÊñô", style=discord.ButtonStyle.secondary, emoji="üîô", row=2)
    async def back_to_character_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # ËøîÂõûÂà∞ËßíËâ≤Âü∫Êú¨Ë≥áÊñô
        try:
            from functions.API_functions.CreateCharacterEmbed import create_character_basic_embed
            embed = create_character_basic_embed(self.character_name)
            
            # ÂâµÂª∫‰∏ÄÂÄãÁ∞°ÂñÆÁöÑ viewÔºåÂè™È°ØÁ§∫ÊåâÈàïËÆìÁî®Êà∂ÈÅ∏ÊìáËøîÂõûË£ùÂÇôÊàñÈáçÊñ∞Êü•Ë©¢
            class SimpleCharacterView(discord.ui.View):
                def __init__(self, character_name: str):
                    super().__init__(timeout=300)
                    self.character_name = character_name
                
                @discord.ui.button(label="ËßíËâ≤", style=discord.ButtonStyle.primary, emoji="üë§")
                async def character_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                    await interaction.response.defer()
                
                @discord.ui.button(label="È†êË®≠1", style=discord.ButtonStyle.success)
                async def preset_1_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                    result = create_character_equipment_embed(self.character_name)
                    embed = result["embed"]
                    view = result["view"]
                    if view and embed:
                        view.current_preset = "preset_1"
                        view._process_equipment_data()
                        embed = view.create_embed("weapon")
                        await interaction.response.edit_message(embed=embed, view=view)
                
                @discord.ui.button(label="È†êË®≠2", style=discord.ButtonStyle.success)
                async def preset_2_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                    result = create_character_equipment_embed(self.character_name)
                    embed = result["embed"]
                    view = result["view"]
                    if view and embed:
                        view.current_preset = "preset_2"
                        view._process_equipment_data()
                        embed = view.create_embed("weapon")
                        await interaction.response.edit_message(embed=embed, view=view)
                
                @discord.ui.button(label="È†êË®≠3", style=discord.ButtonStyle.success)
                async def preset_3_button(self, interaction: discord.Interaction, button: discord.ui.Button):
                    result = create_character_equipment_embed(self.character_name)
                    embed = result["embed"]
                    view = result["view"]
                    if view and embed:
                        view.current_preset = "preset_3"
                        view._process_equipment_data()
                        embed = view.create_embed("weapon")
                        await interaction.response.edit_message(embed=embed, view=view)
            
            view = SimpleCharacterView(self.character_name)
            await interaction.response.edit_message(embed=embed, view=view)
        except Exception as e:
            error_embed = discord.Embed(
                title="ÈåØË™§",
                description=f"ËøîÂõûËßíËâ≤Ë≥áÊñôÊôÇÁôºÁîüÈåØË™§: {str(e)}",
                color=discord.Color.red()
            )
            await interaction.response.edit_message(embed=error_embed)
    
    async def on_timeout(self):
        # Ë∂ÖÊôÇÂæåÁ¶ÅÁî®ÊâÄÊúâÁµÑ‰ª∂
        for item in self.children:
            item.disabled = True


def create_character_equipment_embed(character_name: str) -> dict:
    """
    ÂâµÂª∫ËßíËâ≤Ë£ùÂÇôË≥áË®äÁöÑ Discord embed Âíå View
    
    Args:
        character_name: ËßíËâ≤ÂêçÁ®±
    
    Returns:
        dict: ÂåÖÂê´ 'embed' Âíå 'view' ÁöÑÂ≠óÂÖ∏
    """
    ocid = get_character_ocid(character_name)
    
    if not ocid:
        embed = discord.Embed(
            title="ÈåØË™§",
            description=f"ÁÑ°Ê≥ïÊâæÂà∞ËßíËâ≤ '{character_name}' ÁöÑË≥áË®ä",
            color=discord.Color.red(),
            timestamp=datetime.datetime.now()
        )
        return {"embed": embed, "view": None}
    
    # Áç≤ÂèñË£ùÂÇôË≥áÊñô
    character_equipment_data = request_character_itemequipment(ocid)
    
    if not character_equipment_data:
        embed = discord.Embed(
            title="ÈåØË™§",
            description=f"ÁÑ°Ê≥ïÁç≤ÂèñËßíËâ≤ '{character_name}' ÁöÑË£ùÂÇôË≥áË®ä",
            color=discord.Color.red(),
            timestamp=datetime.datetime.now()
        )
        return {"embed": embed, "view": None}
    
    # Ê™¢Êü•ÊòØÂê¶Ëá≥Â∞ëÊúâ‰∏ÄÂÄã preset ÁöÑË≥áÊñô
    has_preset_data = False
    for preset_num in [1, 2, 3]:
        preset_key = f'item_equipment_preset_{preset_num}'
        if character_equipment_data.get(preset_key):
            has_preset_data = True
            break
    
    if not has_preset_data:
        embed = discord.Embed(
            title="ÈåØË™§", 
            description=f"ËßíËâ≤ '{character_name}' Ê≤íÊúâ‰ªª‰ΩïË£ùÂÇôÈ†êË®≠ÈÖçÁΩÆË≥áÊñô",
            color=discord.Color.red(),
            timestamp=datetime.datetime.now()
        )
        return {"embed": embed, "view": None}
    
    # ÂâµÂª∫ View ÂíåÂàùÂßã embed
    view = EquipmentView(character_name, character_equipment_data)
    initial_embed = view.create_embed("weapon")  # È†êË®≠È°ØÁ§∫Ê≠¶Âô®
    
    return {"embed": initial_embed, "view": view}